import css from './FeedbackModal.module.scss';

import { useEffect, useState } from 'react';

import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/shared/ui/dialog';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel } from '@/shared/ui/form';
import { Button } from '@/shared/ui/button';
import { toast } from 'sonner';

import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { FeedbackFormSchema } from './schema';

import { useCreateFeedbackMutation } from '@/shared/redux/features/feedbackApi';

import { Separator } from '@/shared/ui/separator';
import { Textarea } from '@/shared/ui/textarea';

type Props = {
  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;
  open: boolean;
  children: React.ReactNode;
  workId: string;
};

type FieldErrors = {
  [key: string]: any | undefined;
};

export default function FeedbackModal({
  open,
  setIsOpen,
  children,
  workId,
}: Props): JSX.Element {
  const [createFeedback, {isLoading}] = useCreateFeedbackMutation();
  const form = useForm<z.infer<typeof FeedbackFormSchema>>({
    resolver: zodResolver(FeedbackFormSchema),
    defaultValues: {
      description: '',
    },
  });

  const [isErrorsShown, setIsErrorsShown] = useState<boolean>(false);
  const errors: FieldErrors = form.formState.errors;

  const onSubmit = async (data: z.infer<typeof FeedbackFormSchema>) => {
    toast.success('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∫–ª–∏–∫!');
    console.log(data);
    const payload = {
        workId,
        description: data.description,
    }
    toast.loading("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞...");
    try {
        const response = await createFeedback(payload).unwrap();
        form.reset();
        toast.success('–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω!')
        console.log(response);
    } catch (e: any) {
        if (e.data && e.data.message) {
          toast.error(e.data.message);
        } else {
          toast.error('–£–ø—Å—Å, –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞...');
        }
        console.error(e, '–ì–æ–≤–Ω–æ –Ω–µ –∑–∞—à–ª–æ', payload);
      } finally {
        toast.dismiss();
      }
  }

  useEffect(() => {
    if (!isErrorsShown) return;
    for (const field in errors) {
      const errorMessage = errors[field]?.message;
      if (errorMessage) {
        toast.error(errorMessage, { position: 'top-center' });
      }
    }
    setIsErrorsShown(false);
  }, [isErrorsShown]);

  return (
    <Dialog modal={true} open={open} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className={css.dialogContent}>
        <DialogHeader>
          <DialogTitle className={css.title}>
            <h1>–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –æ—Ç–∫–ª–∏–∫—É!</h1>
          </DialogTitle>
        </DialogHeader>
        <Separator orientation="horizontal" decorative />
        <DialogFooter className={css.footer}>
          <Form {...form}>
            <form className={css.form} onSubmit={form.handleSubmit(onSubmit)}>
              <FormField
                control={form.control}
                name="description"
                render={({ field }) => {
                  return (
                    <FormItem>
                      <FormControl>
                        <Textarea
                          className="min-h-72"
                          placeholder="üöÄ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω—Ç–æ–Ω, –∏ —è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ. –£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –æ–±–ª–∞—Å—Ç–∏..."
                          {...field}
                        />
                      </FormControl>
                    </FormItem>
                  );
                }}
              />
                <Button onClick={() => setIsErrorsShown(true)}>
                  –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                </Button>
            </form>
          </Form>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
